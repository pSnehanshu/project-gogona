generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(cuid()) @db.VarChar(30)
  email               String?     @unique @db.VarChar(255)
  emailVerified       Boolean     @default(false)
  name                String      @db.VarChar(255)
  password            String?     @db.VarChar(70)
  createdAt           DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime    @updatedAt @db.Timestamptz(6)
  isWhatsAppNumber    Boolean     @default(false)
  phoneNumber         String?     @unique @db.VarChar(20)
  phoneNumberVerified Boolean     @default(false)
  otp                 String?     @db.VarChar(6)
  Creator             Creator?
  Files               File[]
  Subscriber          Subscriber?
}

model Creator {
  id              String           @id @default(cuid()) @db.VarChar(30)
  handle          String           @unique @db.VarChar(15)
  userId          String           @unique @db.VarChar(30)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6)
  User            User             @relation(fields: [userId], references: [id])
  Memberships     Membership[]
  MembershipTiers MembershipTier[]
  Posts           Post[]
}

model Subscriber {
  id          String       @id @default(cuid()) @db.VarChar(30)
  userId      String       @unique @db.VarChar(30)
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
  User        User         @relation(fields: [userId], references: [id])
  Memberships Membership[]
}

model Membership {
  creatorId    String         @db.VarChar(30)
  subscriberId String         @db.VarChar(30)
  tierId       String         @db.VarChar(30)
  pgSubId      String         @db.VarChar(255)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt @db.Timestamptz(6)
  Creator      Creator        @relation(fields: [creatorId], references: [id])
  Subscriber   Subscriber     @relation(fields: [subscriberId], references: [id])
  Tier         MembershipTier @relation(fields: [tierId], references: [id])

  @@id([creatorId, subscriberId, tierId])
}

model MembershipTier {
  id          String       @id @default(cuid()) @db.VarChar(30)
  name        String       @db.VarChar(30)
  description String       @default("")
  creatorId   String       @db.VarChar(30)
  price       Int          @default(0)
  currency    Currency     @default(INR)
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
  Creator     Creator      @relation(fields: [creatorId], references: [id])
  Memberships Membership[]
  Posts       Post[]
}

model Post {
  id          String             @id @default(cuid()) @db.VarChar(30)
  creatorId   String             @db.VarChar(30)
  text        String             @default("")
  createdAt   DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime           @updatedAt @db.Timestamptz(6)
  minTierId   String?            @db.VarChar(30)
  Creator     Creator            @relation(fields: [creatorId], references: [id])
  MinimumTier MembershipTier?    @relation(fields: [minTierId], references: [id])
  Files       PostMediaMapping[]
}

model File {
  id             String             @id @default(cuid()) @db.VarChar(30)
  link           String             @db.VarChar(255)
  mimeType       String             @db.VarChar(50)
  uploaderUserId String             @db.VarChar(30)
  createdAt      DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime           @updatedAt @db.Timestamptz(6)
  Uploader       User               @relation(fields: [uploaderUserId], references: [id])
  Posts          PostMediaMapping[]
}

model PostMediaMapping {
  postId    String   @db.VarChar(30)
  fileId    String   @db.VarChar(30)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  File      File     @relation(fields: [fileId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])

  @@id([postId, fileId])
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

enum Currency {
  INR
  USD
  EUR
  AUD
  SGD
  AED
}
